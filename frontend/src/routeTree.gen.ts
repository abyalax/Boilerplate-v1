/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root';
import { Route as protectedRouteRouteImport } from './app/(protected)/route';
import { Route as IndexRouteImport } from './app/index';
import { Route as publicAuthRouteRouteImport } from './app/(public)/auth/route';
import { Route as protectedProductsIndexRouteImport } from './app/(protected)/products/index';
import { Route as protectedPosIndexRouteImport } from './app/(protected)/pos/index';
import { Route as protectedDashboardIndexRouteImport } from './app/(protected)/dashboard/index';
import { Route as publicAuthRegisterRouteImport } from './app/(public)/auth/register';
import { Route as publicAuthLoginRouteImport } from './app/(public)/auth/login';
import { Route as protectedProductsCreateIndexRouteImport } from './app/(protected)/products/create/index';
import { Route as protectedProductsIdIndexRouteImport } from './app/(protected)/products/$id/index';

const protectedRouteRoute = protectedRouteRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const publicAuthRouteRoute = publicAuthRouteRouteImport.update({
  id: '/(public)/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any);
const protectedProductsIndexRoute = protectedProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => protectedRouteRoute,
} as any);
const protectedPosIndexRoute = protectedPosIndexRouteImport.update({
  id: '/pos/',
  path: '/pos/',
  getParentRoute: () => protectedRouteRoute,
} as any);
const protectedDashboardIndexRoute = protectedDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => protectedRouteRoute,
} as any);
const publicAuthRegisterRoute = publicAuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => publicAuthRouteRoute,
} as any);
const publicAuthLoginRoute = publicAuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => publicAuthRouteRoute,
} as any);
const protectedProductsCreateIndexRoute = protectedProductsCreateIndexRouteImport.update({
  id: '/products/create/',
  path: '/products/create/',
  getParentRoute: () => protectedRouteRoute,
} as any);
const protectedProductsIdIndexRoute = protectedProductsIdIndexRouteImport.update({
  id: '/products/$id/',
  path: '/products/$id/',
  getParentRoute: () => protectedRouteRoute,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof protectedRouteRouteWithChildren;
  '/auth': typeof publicAuthRouteRouteWithChildren;
  '/auth/login': typeof publicAuthLoginRoute;
  '/auth/register': typeof publicAuthRegisterRoute;
  '/dashboard': typeof protectedDashboardIndexRoute;
  '/pos': typeof protectedPosIndexRoute;
  '/products': typeof protectedProductsIndexRoute;
  '/products/$id': typeof protectedProductsIdIndexRoute;
  '/products/create': typeof protectedProductsCreateIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof protectedRouteRouteWithChildren;
  '/auth': typeof publicAuthRouteRouteWithChildren;
  '/auth/login': typeof publicAuthLoginRoute;
  '/auth/register': typeof publicAuthRegisterRoute;
  '/dashboard': typeof protectedDashboardIndexRoute;
  '/pos': typeof protectedPosIndexRoute;
  '/products': typeof protectedProductsIndexRoute;
  '/products/$id': typeof protectedProductsIdIndexRoute;
  '/products/create': typeof protectedProductsCreateIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/(protected)': typeof protectedRouteRouteWithChildren;
  '/(public)/auth': typeof publicAuthRouteRouteWithChildren;
  '/(public)/auth/login': typeof publicAuthLoginRoute;
  '/(public)/auth/register': typeof publicAuthRegisterRoute;
  '/(protected)/dashboard/': typeof protectedDashboardIndexRoute;
  '/(protected)/pos/': typeof protectedPosIndexRoute;
  '/(protected)/products/': typeof protectedProductsIndexRoute;
  '/(protected)/products/$id/': typeof protectedProductsIdIndexRoute;
  '/(protected)/products/create/': typeof protectedProductsCreateIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/auth' | '/auth/login' | '/auth/register' | '/dashboard' | '/pos' | '/products' | '/products/$id' | '/products/create';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/auth' | '/auth/login' | '/auth/register' | '/dashboard' | '/pos' | '/products' | '/products/$id' | '/products/create';
  id:
    | '__root__'
    | '/'
    | '/(protected)'
    | '/(public)/auth'
    | '/(public)/auth/login'
    | '/(public)/auth/register'
    | '/(protected)/dashboard/'
    | '/(protected)/pos/'
    | '/(protected)/products/'
    | '/(protected)/products/$id/'
    | '/(protected)/products/create/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  protectedRouteRoute: typeof protectedRouteRouteWithChildren;
  publicAuthRouteRoute: typeof publicAuthRouteRouteWithChildren;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protected)': {
      id: '/(protected)';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof protectedRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/(public)/auth': {
      id: '/(public)/auth';
      path: '/auth';
      fullPath: '/auth';
      preLoaderRoute: typeof publicAuthRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/(protected)/products/': {
      id: '/(protected)/products/';
      path: '/products';
      fullPath: '/products';
      preLoaderRoute: typeof protectedProductsIndexRouteImport;
      parentRoute: typeof protectedRouteRoute;
    };
    '/(protected)/pos/': {
      id: '/(protected)/pos/';
      path: '/pos';
      fullPath: '/pos';
      preLoaderRoute: typeof protectedPosIndexRouteImport;
      parentRoute: typeof protectedRouteRoute;
    };
    '/(protected)/dashboard/': {
      id: '/(protected)/dashboard/';
      path: '/dashboard';
      fullPath: '/dashboard';
      preLoaderRoute: typeof protectedDashboardIndexRouteImport;
      parentRoute: typeof protectedRouteRoute;
    };
    '/(public)/auth/register': {
      id: '/(public)/auth/register';
      path: '/register';
      fullPath: '/auth/register';
      preLoaderRoute: typeof publicAuthRegisterRouteImport;
      parentRoute: typeof publicAuthRouteRoute;
    };
    '/(public)/auth/login': {
      id: '/(public)/auth/login';
      path: '/login';
      fullPath: '/auth/login';
      preLoaderRoute: typeof publicAuthLoginRouteImport;
      parentRoute: typeof publicAuthRouteRoute;
    };
    '/(protected)/products/create/': {
      id: '/(protected)/products/create/';
      path: '/products/create';
      fullPath: '/products/create';
      preLoaderRoute: typeof protectedProductsCreateIndexRouteImport;
      parentRoute: typeof protectedRouteRoute;
    };
    '/(protected)/products/$id/': {
      id: '/(protected)/products/$id/';
      path: '/products/$id';
      fullPath: '/products/$id';
      preLoaderRoute: typeof protectedProductsIdIndexRouteImport;
      parentRoute: typeof protectedRouteRoute;
    };
  }
}

interface protectedRouteRouteChildren {
  protectedDashboardIndexRoute: typeof protectedDashboardIndexRoute;
  protectedPosIndexRoute: typeof protectedPosIndexRoute;
  protectedProductsIndexRoute: typeof protectedProductsIndexRoute;
  protectedProductsIdIndexRoute: typeof protectedProductsIdIndexRoute;
  protectedProductsCreateIndexRoute: typeof protectedProductsCreateIndexRoute;
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedDashboardIndexRoute: protectedDashboardIndexRoute,
  protectedPosIndexRoute: protectedPosIndexRoute,
  protectedProductsIndexRoute: protectedProductsIndexRoute,
  protectedProductsIdIndexRoute: protectedProductsIdIndexRoute,
  protectedProductsCreateIndexRoute: protectedProductsCreateIndexRoute,
};

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(protectedRouteRouteChildren);

interface publicAuthRouteRouteChildren {
  publicAuthLoginRoute: typeof publicAuthLoginRoute;
  publicAuthRegisterRoute: typeof publicAuthRegisterRoute;
}

const publicAuthRouteRouteChildren: publicAuthRouteRouteChildren = {
  publicAuthLoginRoute: publicAuthLoginRoute,
  publicAuthRegisterRoute: publicAuthRegisterRoute,
};

const publicAuthRouteRouteWithChildren = publicAuthRouteRoute._addFileChildren(publicAuthRouteRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  protectedRouteRoute: protectedRouteRouteWithChildren,
  publicAuthRouteRoute: publicAuthRouteRouteWithChildren,
};
export const routeTree = rootRouteImport._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();
